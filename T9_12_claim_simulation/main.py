#  Задание от преподавателя

# Симуляция клейма дропа
# Задание:
# Напишите программу, которая симулирует процесс клейма (claim) токенов из дропа по указанному контракту.
# Полезная информация:
# 1. Адрес контракта: 0x060e7c1bc320C9e7C1760e06A5455c343D16603B
# 2. Функции контракта:
# • register: регистрирует адрес пользователя, добавляя его в маппинг и предоставляя возможность получить 25 токенов.
# • claim: позволяет клеймить определенное количество токенов. Клеймить можно несколько раз, 
# пока есть доступные токены (например, 5 раз по 5 токенов). После получения всех 25 токенов 
# дальнейшие вызовы невозможны.
# • getClaimableAmount: возвращает количество токенов, доступных для клейма на данный момент.
# Шаги выполнения:
# 1. Настройка программы:
# • Пользователь должен указать в настройках:
# • Приватный ключ кошелька.
# • Количество токенов для клейма при каждом вызове функции claim.
# 2. Проверка настроек:
# • Программа проверяет, заполнены ли все обязательные настройки.
# • Если какая-либо настройка не заполнена, выводится информативное сообщение об ошибке с указанием 
# конкретной незаполненной настройки.
# 3. Регистрация пользователя:
# • Программа вызывает функцию register контракта, чтобы зарегистрировать адрес пользователя и получить возможность 
# клеймить токены.
# 4. Проверка доступных токенов:
# • Программа вызывает функцию getClaimableAmount, чтобы определить, сколько токенов доступно для клейма.
# 5. Клейм токенов:
# • Программа вызывает функцию claim, передавая количество токенов для клейма (например, по 5 токенов за раз).
# • Клеймить можно несколько раз, пока не будут получены все доступные токены (максимум 25 токенов).
# • Если попытка клеймить превышает доступное количество токенов, программа выводит сообщение и прекращает выполнение.
# 6. Обработка транзакций:
# • Программа сохраняет хэши транзакций и ожидает их подтверждения.
# • После каждой успешной транзакции выводится сообщение об успешном клейме токенов.
# • После получения всех 25 токенов программа уведомляет пользователя о невозможности дальнейшего клейма.

import asyncio

from client import Client
from settings import PRIVATE_KEY, PROXY
from networks import get_network_by_name
from modules.claim_simulation import ClaimSimulation


async def main() -> None:
    """
    Calim simulation on DropManager contract
    This script will claim all available tokens from DropManager contract.
    You can specify amount of tokens to claim per each transaction.
    """
    
    AMOUNT_TO_CLAIM_PER_TRANSACTION: float = 4.20 # amount of tokens to claim per each transaction
    NETWORK_TO_WORK: str = 'Arbitrum'
    
    client = Client(
        account_name="aiostudy", 
        network=get_network_by_name(NETWORK_TO_WORK),
        private_key=PRIVATE_KEY,
        proxy=PROXY,
    )
    
    async with client:
        claim_simulation = ClaimSimulation(client=client)
        await claim_simulation.claim_all_tokens(amount_to_claim_per_transaction_ether=AMOUNT_TO_CLAIM_PER_TRANSACTION)

if __name__ == "__main__":
    asyncio.run(main())
